package org.kettle.core.database;

import java.util.ArrayList;
import java.util.List;

import org.pentaho.di.core.database.DatabaseMeta;
import org.pentaho.di.core.exception.KettleDatabaseException;

import lotus.domino.Agent;
import lotus.domino.Database;
import lotus.domino.NotesException;
import lotus.domino.NotesFactory;
import lotus.domino.NotesThread;
import lotus.domino.Session;
import lotus.domino.View;

/**
 * 
 * 
 * To use SSL, TrustedCerts.class (typically in domino\java in the data
 * directory of the server) must be on the classpath. This file is generated by
 * the DIIOP task when it starts.
 * 
 * @author Nico
 *
 */

public class DominoDatabaseConnection implements AutoCloseable {

	private Session session;

	private Database database;

	private boolean useLocalClient;
	
	private String label;

	public DominoDatabaseConnection(final DatabaseMeta meta) throws KettleDatabaseException {
		super();

		if (meta == null) {
			throw new KettleDatabaseException("Database connection is not defined");
		}

		this.label = meta.toString();

		try {

			Object value = meta.getAttributes().get(DominoDatabaseMeta.ATTRIBUTE_USE_LOCAL_CLIENT);
			
			this.useLocalClient = false;
			if (value != null && value instanceof String) {

				// Check if the String can be parsed into a boolean
				try {
					this.useLocalClient = Boolean.parseBoolean((String) value);
				} catch (IllegalArgumentException e) {
					// Ignore
				}
			}
		
			
			/* Local session - Notes client must be installed */
			if (this.isUseLocalClient()) {
				NotesThread.sinitThread();
			}

			// Create Domino session
			session = NotesFactory.createSession(meta.getHostname(), meta.getUsername(), meta.getPassword());
			if (session == null) {
				throw new KettleDatabaseException("Couldn't open session through server '" + meta.getHostname() + "'");
			}

			// Open Domino database
			database = session.getDatabase(session.getServerName(), meta.getDatabaseName());
			if (database == null || database.isOpen() == false) {
				throw new KettleDatabaseException("Couldn't open database '" + meta.getDatabaseName()
						+ "' through server '" + meta.getHostname() + "'");
			}
			StringBuilder sb = new StringBuilder();
			sb.append("'");
			sb.append(database.getTitle());
			sb.append("' [");
			sb.append(database.getFilePath());
			sb.append("] on serveur ");
			sb.append(session.getServerName());
			sb.append(" [");
			sb.append(session.getPlatform());
			sb.append("]");
			this.label = sb.toString();
		} catch (UnsatisfiedLinkError e) {
			throw new KettleDatabaseException("Local Notes Client not accessible", e);
		} catch (NoClassDefFoundError e) {
			throw new KettleDatabaseException("Local Notes Client not accessible", e);
		} catch (NotesException ex) {
			throw new KettleDatabaseException(
					"Couldn't create database connection to Domino server '" + meta.getHostname() + "', " + ex.text,
					ex);
		}
	}

	public synchronized Session getSession() {
		return session;
	}

	public boolean isUseLocalClient() {
		return this.useLocalClient;
	}

	public synchronized void close() {

		try {
			if (database != null) {
				database.recycle();
				database = null;
			}

			if (session != null) {
				session.recycle();
				session = null;
			}
		} catch (NotesException e) {
			// Ignore
		} finally {
			// Local session
			if (this.isUseLocalClient()) {
				NotesThread.stermThread();
			}
		}

	}

	public Database getDatabase() {
		return database;
	}

	public View getView(final String name) throws NotesException {
		return database.getView(name);
	}

	public List<View> getViews() throws NotesException {
		List<View> views = new ArrayList<>();

		for (Object view : database.getViews()) {
			views.add((View) view);
		}
		return views;
	}

	public Agent getAgent(final String name) throws NotesException {
		return database.getAgent(name);
	}

	public List<Agent> getAgents() throws NotesException {
		List<Agent> agents = new ArrayList<>();

		for (Object agent : database.getAgents()) {
			agents.add((Agent) agent);
		}
		return agents;
	}

	@Override
	public String toString() {
		return label;
	}

}
